/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface UsdcBuyNftLogicInterface extends ethers.utils.Interface {
  functions: {
    "FISH()": FunctionFragment;
    "FISHNFT()": FunctionFragment;
    "Factory()": FunctionFragment;
    "PRECISION()": FunctionFragment;
    "ROI()": FunctionFragment;
    "Router()": FunctionFragment;
    "TargetROI()": FunctionFragment;
    "USDC()": FunctionFragment;
    "addLiquidityOpen()": FunctionFragment;
    "buyNft(uint256)": FunctionFragment;
    "dev()": FunctionFragment;
    "direction()": FunctionFragment;
    "exchangeRate()": FunctionFragment;
    "initialize(address,address,address,address,address,address,address,address,address,address,address)": FunctionFragment;
    "maxSellAmt()": FunctionFragment;
    "multiSignature()": FunctionFragment;
    "multiSignatureToSToken()": FunctionFragment;
    "op()": FunctionFragment;
    "oracle()": FunctionFragment;
    "oracleData()": FunctionFragment;
    "owner()": FunctionFragment;
    "peekSpot()": FunctionFragment;
    "price()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sFISH()": FunctionFragment;
    "setAddLiquidityOpen(bool)": FunctionFragment;
    "setDev(address)": FunctionFragment;
    "setDirection(uint256)": FunctionFragment;
    "setMaxSellAmt(uint256)": FunctionFragment;
    "setMultiSignature(address)": FunctionFragment;
    "setMultiSignatureToSToken(address)": FunctionFragment;
    "setOp(address)": FunctionFragment;
    "setOracle(address,bytes)": FunctionFragment;
    "setPrice(uint256)": FunctionFragment;
    "setROI(uint256)": FunctionFragment;
    "setStateOpen(bool)": FunctionFragment;
    "setStepSize(uint256)": FunctionFragment;
    "setTargetROI(uint256)": FunctionFragment;
    "setToDevPec(uint256)": FunctionFragment;
    "setToLiquidityPec(uint256)": FunctionFragment;
    "setToOpPec(uint256)": FunctionFragment;
    "setWhitelistDiscount(uint256,uint256)": FunctionFragment;
    "setWhitelistLevel(address,uint256)": FunctionFragment;
    "stateOpen()": FunctionFragment;
    "stepSize()": FunctionFragment;
    "toDevPec()": FunctionFragment;
    "toLiquidityPec()": FunctionFragment;
    "toOpPec()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateExchangeRate()": FunctionFragment;
    "whitelistDiscount(uint256)": FunctionFragment;
    "whitelistLevel(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "FISH", values?: undefined): string;
  encodeFunctionData(functionFragment: "FISHNFT", values?: undefined): string;
  encodeFunctionData(functionFragment: "Factory", values?: undefined): string;
  encodeFunctionData(functionFragment: "PRECISION", values?: undefined): string;
  encodeFunctionData(functionFragment: "ROI", values?: undefined): string;
  encodeFunctionData(functionFragment: "Router", values?: undefined): string;
  encodeFunctionData(functionFragment: "TargetROI", values?: undefined): string;
  encodeFunctionData(functionFragment: "USDC", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addLiquidityOpen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyNft",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "dev", values?: undefined): string;
  encodeFunctionData(functionFragment: "direction", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "exchangeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "maxSellAmt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multiSignature",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multiSignatureToSToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "op", values?: undefined): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "oracleData",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "peekSpot", values?: undefined): string;
  encodeFunctionData(functionFragment: "price", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "sFISH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAddLiquidityOpen",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "setDev", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setDirection",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxSellAmt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMultiSignature",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMultiSignatureToSToken",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setOp", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setOracle",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setROI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStateOpen",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setStepSize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTargetROI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setToDevPec",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setToLiquidityPec",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setToOpPec",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelistDiscount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelistLevel",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stateOpen", values?: undefined): string;
  encodeFunctionData(functionFragment: "stepSize", values?: undefined): string;
  encodeFunctionData(functionFragment: "toDevPec", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "toLiquidityPec",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "toOpPec", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateExchangeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistDiscount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistLevel",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "FISH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "FISHNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PRECISION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ROI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Router", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TargetROI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "USDC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyNft", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dev", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "direction", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxSellAmt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "multiSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiSignatureToSToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "op", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracleData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "peekSpot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sFISH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAddLiquidityOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDev", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDirection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxSellAmt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMultiSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMultiSignatureToSToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setROI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setStateOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStepSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTargetROI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setToDevPec",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setToLiquidityPec",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setToOpPec", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelistDiscount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelistLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stateOpen", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stepSize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toDevPec", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toLiquidityPec",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "toOpPec", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateExchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistDiscount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistLevel",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class UsdcBuyNftLogic extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: UsdcBuyNftLogicInterface;

  functions: {
    FISH(overrides?: CallOverrides): Promise<[string]>;

    FISHNFT(overrides?: CallOverrides): Promise<[string]>;

    Factory(overrides?: CallOverrides): Promise<[string]>;

    PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    ROI(overrides?: CallOverrides): Promise<[BigNumber]>;

    Router(overrides?: CallOverrides): Promise<[string]>;

    TargetROI(overrides?: CallOverrides): Promise<[BigNumber]>;

    USDC(overrides?: CallOverrides): Promise<[string]>;

    addLiquidityOpen(overrides?: CallOverrides): Promise<[boolean]>;

    buyNft(
      _amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dev(overrides?: CallOverrides): Promise<[string]>;

    direction(overrides?: CallOverrides): Promise<[BigNumber]>;

    exchangeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _FISH: string,
      _FISHNFT: string,
      _Factory: string,
      _Router: string,
      _multiSignature: string,
      _multiSignatureToSToken: string,
      _dev: string,
      _op: string,
      _sFISH: string,
      _oracle: string,
      _USDC: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maxSellAmt(overrides?: CallOverrides): Promise<[BigNumber]>;

    multiSignature(overrides?: CallOverrides): Promise<[string]>;

    multiSignatureToSToken(overrides?: CallOverrides): Promise<[string]>;

    op(overrides?: CallOverrides): Promise<[string]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    oracleData(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    peekSpot(overrides?: CallOverrides): Promise<[BigNumber]>;

    price(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sFISH(overrides?: CallOverrides): Promise<[string]>;

    setAddLiquidityOpen(
      _bool: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDev(
      _dev: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDirection(
      _val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxSellAmt(
      _val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMultiSignature(
      _multiSignature: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMultiSignatureToSToken(
      _multiSignatureToSToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOp(
      _op: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOracle(
      _newOracle: string,
      _newOracleData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPrice(
      _val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setROI(
      _val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStateOpen(
      _bool: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStepSize(
      _val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTargetROI(
      _val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setToDevPec(
      _toDevPec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setToLiquidityPec(
      _toLiquidityPec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setToOpPec(
      _toOpPec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWhitelistDiscount(
      _val: BigNumberish,
      _lev: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWhitelistLevel(
      _user: string,
      _lev: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stateOpen(overrides?: CallOverrides): Promise<[boolean]>;

    stepSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    toDevPec(overrides?: CallOverrides): Promise<[BigNumber]>;

    toLiquidityPec(overrides?: CallOverrides): Promise<[BigNumber]>;

    toOpPec(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateExchangeRate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelistDiscount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    whitelistLevel(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  FISH(overrides?: CallOverrides): Promise<string>;

  FISHNFT(overrides?: CallOverrides): Promise<string>;

  Factory(overrides?: CallOverrides): Promise<string>;

  PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  ROI(overrides?: CallOverrides): Promise<BigNumber>;

  Router(overrides?: CallOverrides): Promise<string>;

  TargetROI(overrides?: CallOverrides): Promise<BigNumber>;

  USDC(overrides?: CallOverrides): Promise<string>;

  addLiquidityOpen(overrides?: CallOverrides): Promise<boolean>;

  buyNft(
    _amt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dev(overrides?: CallOverrides): Promise<string>;

  direction(overrides?: CallOverrides): Promise<BigNumber>;

  exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _FISH: string,
    _FISHNFT: string,
    _Factory: string,
    _Router: string,
    _multiSignature: string,
    _multiSignatureToSToken: string,
    _dev: string,
    _op: string,
    _sFISH: string,
    _oracle: string,
    _USDC: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maxSellAmt(overrides?: CallOverrides): Promise<BigNumber>;

  multiSignature(overrides?: CallOverrides): Promise<string>;

  multiSignatureToSToken(overrides?: CallOverrides): Promise<string>;

  op(overrides?: CallOverrides): Promise<string>;

  oracle(overrides?: CallOverrides): Promise<string>;

  oracleData(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  peekSpot(overrides?: CallOverrides): Promise<BigNumber>;

  price(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sFISH(overrides?: CallOverrides): Promise<string>;

  setAddLiquidityOpen(
    _bool: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDev(
    _dev: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDirection(
    _val: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxSellAmt(
    _val: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMultiSignature(
    _multiSignature: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMultiSignatureToSToken(
    _multiSignatureToSToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOp(
    _op: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOracle(
    _newOracle: string,
    _newOracleData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPrice(
    _val: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setROI(
    _val: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStateOpen(
    _bool: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStepSize(
    _val: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTargetROI(
    _val: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setToDevPec(
    _toDevPec: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setToLiquidityPec(
    _toLiquidityPec: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setToOpPec(
    _toOpPec: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWhitelistDiscount(
    _val: BigNumberish,
    _lev: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWhitelistLevel(
    _user: string,
    _lev: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stateOpen(overrides?: CallOverrides): Promise<boolean>;

  stepSize(overrides?: CallOverrides): Promise<BigNumber>;

  toDevPec(overrides?: CallOverrides): Promise<BigNumber>;

  toLiquidityPec(overrides?: CallOverrides): Promise<BigNumber>;

  toOpPec(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateExchangeRate(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelistDiscount(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  whitelistLevel(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    FISH(overrides?: CallOverrides): Promise<string>;

    FISHNFT(overrides?: CallOverrides): Promise<string>;

    Factory(overrides?: CallOverrides): Promise<string>;

    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    ROI(overrides?: CallOverrides): Promise<BigNumber>;

    Router(overrides?: CallOverrides): Promise<string>;

    TargetROI(overrides?: CallOverrides): Promise<BigNumber>;

    USDC(overrides?: CallOverrides): Promise<string>;

    addLiquidityOpen(overrides?: CallOverrides): Promise<boolean>;

    buyNft(_amt: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    dev(overrides?: CallOverrides): Promise<string>;

    direction(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _FISH: string,
      _FISHNFT: string,
      _Factory: string,
      _Router: string,
      _multiSignature: string,
      _multiSignatureToSToken: string,
      _dev: string,
      _op: string,
      _sFISH: string,
      _oracle: string,
      _USDC: string,
      overrides?: CallOverrides
    ): Promise<void>;

    maxSellAmt(overrides?: CallOverrides): Promise<BigNumber>;

    multiSignature(overrides?: CallOverrides): Promise<string>;

    multiSignatureToSToken(overrides?: CallOverrides): Promise<string>;

    op(overrides?: CallOverrides): Promise<string>;

    oracle(overrides?: CallOverrides): Promise<string>;

    oracleData(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    peekSpot(overrides?: CallOverrides): Promise<BigNumber>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sFISH(overrides?: CallOverrides): Promise<string>;

    setAddLiquidityOpen(
      _bool: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setDev(_dev: string, overrides?: CallOverrides): Promise<boolean>;

    setDirection(
      _val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setMaxSellAmt(
      _val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setMultiSignature(
      _multiSignature: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setMultiSignatureToSToken(
      _multiSignatureToSToken: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setOp(_op: string, overrides?: CallOverrides): Promise<boolean>;

    setOracle(
      _newOracle: string,
      _newOracleData: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setPrice(_val: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    setROI(_val: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    setStateOpen(_bool: boolean, overrides?: CallOverrides): Promise<boolean>;

    setStepSize(
      _val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setTargetROI(
      _val: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setToDevPec(
      _toDevPec: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setToLiquidityPec(
      _toLiquidityPec: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setToOpPec(
      _toOpPec: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setWhitelistDiscount(
      _val: BigNumberish,
      _lev: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setWhitelistLevel(
      _user: string,
      _lev: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    stateOpen(overrides?: CallOverrides): Promise<boolean>;

    stepSize(overrides?: CallOverrides): Promise<BigNumber>;

    toDevPec(overrides?: CallOverrides): Promise<BigNumber>;

    toLiquidityPec(overrides?: CallOverrides): Promise<BigNumber>;

    toOpPec(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateExchangeRate(
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { updated: boolean; rate: BigNumber }>;

    whitelistDiscount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistLevel(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    FISH(overrides?: CallOverrides): Promise<BigNumber>;

    FISHNFT(overrides?: CallOverrides): Promise<BigNumber>;

    Factory(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    ROI(overrides?: CallOverrides): Promise<BigNumber>;

    Router(overrides?: CallOverrides): Promise<BigNumber>;

    TargetROI(overrides?: CallOverrides): Promise<BigNumber>;

    USDC(overrides?: CallOverrides): Promise<BigNumber>;

    addLiquidityOpen(overrides?: CallOverrides): Promise<BigNumber>;

    buyNft(
      _amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dev(overrides?: CallOverrides): Promise<BigNumber>;

    direction(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _FISH: string,
      _FISHNFT: string,
      _Factory: string,
      _Router: string,
      _multiSignature: string,
      _multiSignatureToSToken: string,
      _dev: string,
      _op: string,
      _sFISH: string,
      _oracle: string,
      _USDC: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maxSellAmt(overrides?: CallOverrides): Promise<BigNumber>;

    multiSignature(overrides?: CallOverrides): Promise<BigNumber>;

    multiSignatureToSToken(overrides?: CallOverrides): Promise<BigNumber>;

    op(overrides?: CallOverrides): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    oracleData(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    peekSpot(overrides?: CallOverrides): Promise<BigNumber>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sFISH(overrides?: CallOverrides): Promise<BigNumber>;

    setAddLiquidityOpen(
      _bool: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDev(
      _dev: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDirection(
      _val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxSellAmt(
      _val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMultiSignature(
      _multiSignature: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMultiSignatureToSToken(
      _multiSignatureToSToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOp(
      _op: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOracle(
      _newOracle: string,
      _newOracleData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPrice(
      _val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setROI(
      _val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStateOpen(
      _bool: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStepSize(
      _val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTargetROI(
      _val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setToDevPec(
      _toDevPec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setToLiquidityPec(
      _toLiquidityPec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setToOpPec(
      _toOpPec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWhitelistDiscount(
      _val: BigNumberish,
      _lev: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWhitelistLevel(
      _user: string,
      _lev: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stateOpen(overrides?: CallOverrides): Promise<BigNumber>;

    stepSize(overrides?: CallOverrides): Promise<BigNumber>;

    toDevPec(overrides?: CallOverrides): Promise<BigNumber>;

    toLiquidityPec(overrides?: CallOverrides): Promise<BigNumber>;

    toOpPec(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateExchangeRate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelistDiscount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistLevel(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    FISH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FISHNFT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    Factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    Router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TargetROI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USDC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addLiquidityOpen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyNft(
      _amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dev(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    direction(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exchangeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _FISH: string,
      _FISHNFT: string,
      _Factory: string,
      _Router: string,
      _multiSignature: string,
      _multiSignatureToSToken: string,
      _dev: string,
      _op: string,
      _sFISH: string,
      _oracle: string,
      _USDC: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maxSellAmt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multiSignature(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multiSignatureToSToken(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    op(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracleData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    peekSpot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sFISH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAddLiquidityOpen(
      _bool: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDev(
      _dev: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDirection(
      _val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxSellAmt(
      _val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMultiSignature(
      _multiSignature: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMultiSignatureToSToken(
      _multiSignatureToSToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOp(
      _op: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOracle(
      _newOracle: string,
      _newOracleData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPrice(
      _val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setROI(
      _val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStateOpen(
      _bool: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStepSize(
      _val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTargetROI(
      _val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setToDevPec(
      _toDevPec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setToLiquidityPec(
      _toLiquidityPec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setToOpPec(
      _toOpPec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWhitelistDiscount(
      _val: BigNumberish,
      _lev: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWhitelistLevel(
      _user: string,
      _lev: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stateOpen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stepSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toDevPec(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toLiquidityPec(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toOpPec(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateExchangeRate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelistDiscount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistLevel(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
